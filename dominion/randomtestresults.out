File 'dominion.c'
Lines executed:43.66% of 584
Branches executed:52.27% of 419
Taken at least once:32.94% of 419
Calls executed:29.35% of 92
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:37
        -:    0:Programs:8
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 19200 returned 100% blocks executed 100%
    19200:    8:int compare(const void *a, const void *b)
        -:    9:{
    19200:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 8790 (fallthrough)
branch  1 taken 10410
     8790:   11:    return 1;
    10410:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 2850 (fallthrough)
branch  1 taken 7560
     2850:   13:    return -1;
     7560:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 30 returned 100% blocks executed 88%
       30:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       30:   48:  SelectStream(1);
call    0 returned 30
       30:   49:  PutSeed((long)randomSeed);
call    0 returned 30
        -:   50:
        -:   51:  //check number of players
       30:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 30
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       30:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      330:   61:  for (i = 0; i < 10; i++)
branch  0 taken 300
branch  1 taken 30 (fallthrough)
        -:   62:  {
     3300:   63:    for (j = 0; j < 10; j++)
branch  0 taken 3000
branch  1 taken 300 (fallthrough)
        -:   64:    {
     3000:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 2700 (fallthrough)
branch  1 taken 300
branch  2 taken 0 (fallthrough)
branch  3 taken 2700
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       30:   76:  if (numPlayers == 2)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
        -:   77:  {
       30:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       30:   90:  if (numPlayers == 2)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
        -:   91:  {
       30:   92:    state->supplyCount[estate] = 8;
       30:   93:    state->supplyCount[duchy] = 8;
       30:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       30:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       30:  105:  state->supplyCount[silver] = 40;
       30:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      630:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 600
branch  1 taken 30 (fallthrough)
        -:  110:  {
     4950:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 4650
branch  1 taken 300 (fallthrough)
        -:  112:    {
     4650:  113:      if (kingdomCards[j] == i)
branch  0 taken 300 (fallthrough)
branch  1 taken 4350
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      300:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 300 (fallthrough)
branch  1 taken 0
branch  2 taken 30 (fallthrough)
branch  3 taken 270
        -:  117:        {
       60:  118:          if (numPlayers == 2)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
        -:  119:          {
       30:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      270:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      300:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     4350:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       90:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 60
branch  1 taken 30 (fallthrough)
        -:  145:  {
       60:  146:    state->deckCount[i] = 0;
      240:  147:    for (j = 0; j < 3; j++)
branch  0 taken 180
branch  1 taken 60 (fallthrough)
        -:  148:    {
      180:  149:      state->deck[i][j] = estate;
      180:  150:      state->deckCount[i]++;
        -:  151:    }
      480:  152:    for (j = 3; j < 10; j++)
branch  0 taken 420
branch  1 taken 60 (fallthrough)
        -:  153:    {
      420:  154:      state->deck[i][j] = copper;
      420:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       90:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 60
branch  1 taken 30 (fallthrough)
        -:  161:  {
       60:  162:    if (shuffle(i, state) < 0)
call    0 returned 60
branch  1 taken 0 (fallthrough)
branch  2 taken 60
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       90:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 60
branch  1 taken 30 (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       60:  172:    state->handCount[i] = 0;
       60:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      840:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 810
branch  1 taken 30 (fallthrough)
        -:  183:  {
      810:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       30:  188:  state->outpostPlayed = 0;
       30:  189:  state->phase = 0;
       30:  190:  state->numActions = 1;
       30:  191:  state->numBuys = 1;
       30:  192:  state->playedCardCount = 0;
       30:  193:  state->whoseTurn = 0;
       30:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      180:  198:  for (it = 0; it < 5; it++)
branch  0 taken 150
branch  1 taken 30 (fallthrough)
        -:  199:  {
      150:  200:    drawCard(state->whoseTurn, state);
call    0 returned 150
        -:  201:  }
        -:  202:
       30:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 30
        -:  204:
       30:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 480 returned 100% blocks executed 94%
      480:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      480:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      480:  216:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 480
    #####:  217:    return -1;
      480:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 480
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     8040:  221:  while (state->deckCount[player] > 0)
branch  0 taken 7080
branch  1 taken 480 (fallthrough)
        -:  222:  {
     7080:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 7080
     7080:  224:    newDeck[newDeckPos] = state->deck[player][card];
     7080:  225:    newDeckPos++;
    34500:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 27420
branch  1 taken 7080 (fallthrough)
        -:  227:    {
    27420:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
     7080:  230:    state->deckCount[player]--;
        -:  231:  }
     7560:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 7080
branch  1 taken 480 (fallthrough)
        -:  233:  {
     7080:  234:    state->deck[player][i] = newDeck[i];
     7080:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
      480:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 1110 returned 100% blocks executed 80%
     1110:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
     1110:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
     1110:  247:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1110
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
     1110:  253:  if (state->numActions < 1)
branch  0 taken 870 (fallthrough)
branch  1 taken 240
        -:  254:  {
      870:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
      240:  259:  card = handCard(handPos, state);
call    0 returned 240
        -:  260:
        -:  261:  //check if selected card is an action
      240:  262:  if (card < adventurer || card > treasure_map)
branch  0 taken 240 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 240
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
      240:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 returned 240
branch  1 taken 0 (fallthrough)
branch  2 taken 240
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
      240:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
      240:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 240
        -:  278:
      240:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 1140 returned 100% blocks executed 79%
     1140:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
     1140:  292:  who = state->whoseTurn;
        -:  293:
     1140:  294:  if (state->numBuys < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1140
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
     1140:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 returned 1140
branch  1 taken 0 (fallthrough)
branch  2 taken 1140
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
     1140:  306:  else if (state->coins < getCost(supplyPos))
call    0 returned 1140
branch  1 taken 0 (fallthrough)
branch  2 taken 1140
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
     1140:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
     1140:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 1140
        -:  317:
     1140:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 1140
     1140:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
     1140:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 8640 returned 100% blocks executed 100%
     8640:  330:int numHandCards(struct gameState *state)
        -:  331:{
     8640:  332:  return state->handCount[whoseTurn(state)];
call    0 returned 8640
        -:  333:}
        -:  334:
function handCard called 16950 returned 100% blocks executed 100%
    16950:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    16950:  337:  int currentPlayer = whoseTurn(state);
call    0 returned 16950
    16950:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 2280 returned 100% blocks executed 100%
     2280:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
     2280:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 28231 returned 100% blocks executed 100%
    28231:  372:int whoseTurn(struct gameState *state)
        -:  373:{
    28231:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 1200 returned 100% blocks executed 100%
     1200:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
     1200:  381:  int currentPlayer = whoseTurn(state);
call    0 returned 1200
        -:  382:
        -:  383:  //Discard hand
     7200:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 6000
branch  1 taken 1200 (fallthrough)
        -:  385:  {
     6000:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
     6000:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
     1200:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
     1200:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 taken 600 (fallthrough)
branch  1 taken 600
        -:  393:  {
      600:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
      600:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
     1200:  401:  state->outpostPlayed = 0;
     1200:  402:  state->phase = 0;
     1200:  403:  state->numActions = 1;
     1200:  404:  state->coins = 0;
     1200:  405:  state->numBuys = 1;
     1200:  406:  state->playedCardCount = 0;
     1200:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
     7200:  411:  for (k = 0; k < 5; k++)
branch  0 taken 6000
branch  1 taken 1200 (fallthrough)
        -:  412:  {
     6000:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 returned 6000
        -:  414:  }
        -:  415:
        -:  416:  //Update money
     1200:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1200
        -:  418:
     1200:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 1230 returned 100% blocks executed 82%
     1230:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
     1230:  428:  if (state->supplyCount[province] == 0)
branch  0 taken 30 (fallthrough)
branch  1 taken 1200
        -:  429:  {
       30:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
     1200:  434:  j = 0;
    31200:  435:  for (i = 0; i < 25; i++)
branch  0 taken 30000
branch  1 taken 1200 (fallthrough)
        -:  436:  {
    30000:  437:    if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 30000
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
     1200:  442:  if (j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 1200
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
     1200:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 60 returned 100% blocks executed 68%
       60:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
       60:  454:  int score = 0;
        -:  455:  //score from hand
      210:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 150
branch  1 taken 60 (fallthrough)
        -:  457:  {
      150:  458:    if (state->hand[player][i] == curse)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
      150:  462:    if (state->hand[player][i] == estate)
branch  0 taken 30 (fallthrough)
branch  1 taken 120
        -:  463:    {
       30:  464:      score = score + 1;
        -:  465:    };
      150:  466:    if (state->hand[player][i] == duchy)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
      150:  470:    if (state->hand[player][i] == province)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
      150:  474:    if (state->hand[player][i] == great_hall)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
      150:  478:    if (state->hand[player][i] == gardens)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
      780:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 720
branch  1 taken 60 (fallthrough)
        -:  486:  {
      720:  487:    if (state->discard[player][i] == curse)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
      720:  491:    if (state->discard[player][i] == estate)
branch  0 taken 60 (fallthrough)
branch  1 taken 660
        -:  492:    {
       60:  493:      score = score + 1;
        -:  494:    };
      720:  495:    if (state->discard[player][i] == duchy)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
      720:  499:    if (state->discard[player][i] == province)
branch  0 taken 90 (fallthrough)
branch  1 taken 630
        -:  500:    {
       90:  501:      score = score + 6;
        -:  502:    };
      720:  503:    if (state->discard[player][i] == great_hall)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
      720:  507:    if (state->discard[player][i] == gardens)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
      780:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 720
branch  1 taken 60 (fallthrough)
        -:  515:  {
      720:  516:    if (state->deck[player][i] == curse)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
      720:  520:    if (state->deck[player][i] == estate)
branch  0 taken 90 (fallthrough)
branch  1 taken 630
        -:  521:    {
       90:  522:      score = score + 1;
        -:  523:    };
      720:  524:    if (state->deck[player][i] == duchy)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
      720:  528:    if (state->deck[player][i] == province)
branch  0 taken 60 (fallthrough)
branch  1 taken 660
        -:  529:    {
       60:  530:      score = score + 6;
        -:  531:    };
      720:  532:    if (state->deck[player][i] == great_hall)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
      720:  536:    if (state->deck[player][i] == gardens)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
       60:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 6270 returned 100% blocks executed 92%
     6270:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
     6270:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 420 (fallthrough)
branch  1 taken 5850
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
     6900:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 6480
branch  1 taken 420 (fallthrough)
        -:  625:    {
     6480:  626:      state->deck[player][i] = state->discard[player][i];
     6480:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
      420:  630:    state->deckCount[player] = state->discardCount[player];
      420:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
      420:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 420
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
      420:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
      420:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
      420:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
      420:  653:    if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 420
    #####:  654:      return -1;
        -:  655:
      420:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
      420:  657:    state->deckCount[player]--;
      420:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
     5850:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
     5850:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
     5850:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
     5850:  672:    state->deckCount[player]--;
     5850:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
     6270:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 2280 returned 100% blocks executed 23%
     2280:  679:int getCost(int cardNumber)
        -:  680:{
     2280:  681:  switch (cardNumber)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 480
branch  4 taken 0
branch  5 taken 1260
branch  6 taken 300
branch  7 taken 120
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 120
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
      480:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
     1260:  694:    return 3;
        -:  695:  case gold:
      300:  696:    return 6;
        -:  697:  case adventurer:
      120:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
      120:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:/* function 1 taken out of switch */
function run_adventurer called 180 returned 100% blocks executed 93%
      180:  742:int run_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int z, int *temphand)
        -:  743:{
        -:  744:  int cardDrawn;
      780:  745:  while (drawntreasure < 2)
branch  0 taken 420
branch  1 taken 180 (fallthrough)
        -:  746:  {
      420:  747:    if (state->deckCount[currentPlayer] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 420
        -:  748:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  749:      shuffle(currentPlayer, state);
call    0 never executed
        -:  750:    }
        -:  751:    //drawCard(currentPlayer, state);
      420:  752:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
      420:  753:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 240 (fallthrough)
branch  1 taken 180
branch  2 taken 60 (fallthrough)
branch  3 taken 180
branch  4 taken 0 (fallthrough)
branch  5 taken 60
      360:  754:      drawntreasure++;
        -:  755:    else
        -:  756:    {
       60:  757:      temphand[z] = cardDrawn;
       60:  758:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       60:  759:      z++;
        -:  760:    }
        -:  761:  }
      420:  762:  while (z - 1 >= 0)
branch  0 taken 60
branch  1 taken 180 (fallthrough)
        -:  763:  {
       60:  764:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       60:  765:    z = z - 1;
        -:  766:  }
      180:  767:  return 0;
        -:  768:}
        -:  769:/* function 2 taken out of switch */
function run_smithy called 60 returned 100% blocks executed 100%
       60:  770:int run_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:  771:{
        -:  772:  //+3 Cards
      180:  773:  for (int i = 0; i < 2; ++i)
branch  0 taken 120
branch  1 taken 60 (fallthrough)
        -:  774:  //for (int i = 0; i < 3; i++)
        -:  775:  {
      120:  776:    drawCard(currentPlayer, state);
call    0 returned 120
        -:  777:  }
        -:  778:
        -:  779:  //discard card from hand
       60:  780:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 60
       60:  781:  return 0;
        -:  782:}
        -:  783:/* function 3 taken out of switch */
function run_gardens called 5 returned 100% blocks executed 100%
        5:  784:int run_gardens()
        -:  785:{
        5:  786:  return -1;
        -:  787:}
        -:  788:/* function 4 taken out of switch */
function run_village called 2 returned 100% blocks executed 100%
        2:  789:int run_village(int currentPlayer, struct gameState *state, int handPos)
        -:  790:{
        2:  791:  return 0;
        -:  792:  //+1 Card
        -:  793:  drawCard(currentPlayer, state);
        -:  794:
        -:  795:  //+2 Actions
        -:  796:  state->numActions = state->numActions + 2;
        -:  797:
        -:  798:  //discard played card from hand
        -:  799:  discardCard(handPos, currentPlayer, state, 0);
        -:  800:  return 0;
        -:  801:}
        -:  802:/* function 5 taken out of switch */
function run_great_hall called 0 returned 0% blocks executed 0%
    #####:  803:int run_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  804:{
        -:  805:  //+1 Card
    #####:  806:  drawCard(currentPlayer, state);
call    0 never executed
        -:  807:
        -:  808:  //+1 Actions
    #####:  809:  state->numActions++;
        -:  810:
    #####:  811:  for (int i = 0; i >= 0; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  812:    int k = 0;
    #####:  813:    k++;
        -:  814:  }
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  818:  return 0;
        -:  819:}
        -:  820:
function cardEffect called 241 returned 100% blocks executed 5%
      241:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
      241:  828:  int currentPlayer = whoseTurn(state);
call    0 returned 241
      241:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
      241:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND]; // moved above the if statement
      241:  833:  int drawntreasure = 0;
        -:  834:  //int cardDrawn;
      241:  835:  int z = 0; // this is the counter for the temp hand
      241:  836:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 181 (fallthrough)
branch  1 taken 60
        -:  837:  {
      181:  838:    nextPlayer = 0;
        -:  839:  }
        -:  840:
        -:  841:  //uses switch to select card and perform actions
      241:  842:  switch (card)
branch  0 taken 180
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 60
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  843:  {
        -:  844:  // run adventurer function
        -:  845:  case adventurer:
      180:  846:    run_adventurer(drawntreasure, state, currentPlayer, z, temphand);
call    0 returned 180
      180:  847:    return 0;
        -:  848:
        -:  849:  case council_room:
        -:  850:    //+4 Cards
    #####:  851:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  852:    {
    #####:  853:      drawCard(currentPlayer, state);
call    0 never executed
        -:  854:    }
        -:  855:
        -:  856:    //+1 Buy
    #####:  857:    state->numBuys++;
        -:  858:
        -:  859:    //Each other player draws a card
    #####:  860:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  861:    {
    #####:  862:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  863:      {
    #####:  864:        drawCard(i, state);
call    0 never executed
        -:  865:      }
        -:  866:    }
        -:  867:
        -:  868:    //put played card in played card pile
    #####:  869:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:
    #####:  871:    return 0;
        -:  872:
        -:  873:  case feast:
        -:  874:    //gain card with cost up to 5
        -:  875:    //Backup hand
    #####:  876:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  877:    {
    #####:  878:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  879:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  880:    }
        -:  881:    //Backup hand
        -:  882:
        -:  883:    //Update Coins for Buy
    #####:  884:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  885:    x = 1; //Condition to loop on
    #####:  886:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  887:    { //Buy one card
    #####:  888:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  889:      {
        -:  890:        if (DEBUG)
        -:  891:          printf("None of that card left, sorry!\n");
        -:  892:
        -:  893:        if (DEBUG)
        -:  894:        {
        -:  895:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  896:        }
        -:  897:      }
    #####:  898:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  899:      {
    #####:  900:        printf("That card is too expensive!\n");
call    0 never executed
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:        }
        -:  906:      }
        -:  907:      else
        -:  908:      {
        -:  909:
        -:  910:        if (DEBUG)
        -:  911:        {
        -:  912:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:        }
        -:  914:
    #####:  915:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  916:        x = 0;                                      //No more buying cards
        -:  917:
        -:  918:        if (DEBUG)
        -:  919:        {
        -:  920:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:        }
        -:  922:      }
        -:  923:    }
        -:  924:
        -:  925:    //Reset Hand
    #####:  926:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  927:    {
    #####:  928:      state->hand[currentPlayer][i] = temphand[i];
    #####:  929:      temphand[i] = -1;
        -:  930:    }
        -:  931:    //Reset Hand
        -:  932:
    #####:  933:    return 0;
        -:  934:
        -:  935:  case gardens:
    #####:  936:    run_gardens();
call    0 never executed
    #####:  937:    return -1;
        -:  938:
        -:  939:  case mine:
    #####:  940:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:    {
    #####:  944:      return -1;
        -:  945:    }
        -:  946:
    #####:  947:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  948:    {
    #####:  949:      return -1;
        -:  950:    }
        -:  951:
    #####:  952:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:    {
    #####:  954:      return -1;
        -:  955:    }
        -:  956:
    #####:  957:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  958:
        -:  959:    //discard card from hand
    #####:  960:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  961:
        -:  962:    //discard trashed card
    #####:  963:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  964:    {
    #####:  965:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  966:      {
    #####:  967:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  968:        break;
        -:  969:      }
        -:  970:    }
        -:  971:
    #####:  972:    return 0;
        -:  973:
        -:  974:  case remodel:
    #####:  975:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  976:
    #####:  977:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:    {
    #####:  979:      return -1;
        -:  980:    }
        -:  981:
    #####:  982:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  983:
        -:  984:    //discard card from hand
    #####:  985:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  986:
        -:  987:    //discard trashed card
    #####:  988:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:    {
    #####:  990:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  991:      {
    #####:  992:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  993:        break;
        -:  994:      }
        -:  995:    }
        -:  996:
    #####:  997:    return 0;
        -:  998:
        -:  999:  case smithy:
       60: 1000:    run_smithy(currentPlayer, state, handPos);
call    0 returned 60
       60: 1001:    return 0;
        -: 1002:
        -: 1003:  case village:
        1: 1004:    run_village(currentPlayer, state, handPos);
call    0 returned 1
        1: 1005:    return 0;
        -: 1006:
        -: 1007:  case baron:
    #####: 1008:    state->numBuys++; //Increase buys by 1!
    #####: 1009:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1010:    {                             //Boolean true or going to discard an estate
    #####: 1011:      int p = 0;                  //Iterator for hand!
    #####: 1012:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1013:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1014:      {
    #####: 1015:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1016:        {                    //Found an estate card!
    #####: 1017:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1018:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1019:          state->discardCount[currentPlayer]++;
    #####: 1020:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1021:          {
    #####: 1022:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1023:          }
    #####: 1024:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1025:          state->handCount[currentPlayer]--;
    #####: 1026:          card_not_discarded = 0; //Exit the loop
        -: 1027:        }
    #####: 1028:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1029:        {
        -: 1030:          if (DEBUG)
        -: 1031:          {
        -: 1032:            printf("No estate cards in your hand, invalid choice\n");
        -: 1033:            printf("Must gain an estate if there are any\n");
        -: 1034:          }
    #####: 1035:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1038:            state->supplyCount[estate]--; //Decrement estates
    #####: 1039:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1040:            {
    #####: 1041:              isGameOver(state);
call    0 never executed
        -: 1042:            }
        -: 1043:          }
    #####: 1044:          card_not_discarded = 0; //Exit the loop
        -: 1045:        }
        -: 1046:
        -: 1047:        else
        -: 1048:        {
    #####: 1049:          p++; //Next card
        -: 1050:        }
        -: 1051:      }
        -: 1052:    }
        -: 1053:
        -: 1054:    else
        -: 1055:    {
    #####: 1056:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1057:      {
    #####: 1058:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1059:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1060:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1061:        {
    #####: 1062:          isGameOver(state);
call    0 never executed
        -: 1063:        }
        -: 1064:      }
        -: 1065:    }
        -: 1066:
    #####: 1067:    return 0;
        -: 1068:
        -: 1069:  case great_hall:
    #####: 1070:    run_great_hall(currentPlayer, state, handPos);
call    0 never executed
    #####: 1071:    return 0;
        -: 1072:
        -: 1073:  case minion:
        -: 1074:    //+1 action
    #####: 1075:    state->numActions++;
        -: 1076:
        -: 1077:    //discard card from hand
    #####: 1078:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1079:
    #####: 1080:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1081:    {
    #####: 1082:      state->coins = state->coins + 2;
        -: 1083:    }
        -: 1084:
    #####: 1085:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1086:    {
        -: 1087:      //discard hand
    #####: 1088:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1089:      {
    #####: 1090:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1091:      }
        -: 1092:
        -: 1093:      //draw 4
    #####: 1094:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:      {
    #####: 1096:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1097:      }
        -: 1098:
        -: 1099:      //other players discard hand and redraw if hand size > 4
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:      {
    #####: 1102:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:        {
    #####: 1104:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1105:          {
        -: 1106:            //discard hand
    #####: 1107:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1108:            {
    #####: 1109:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1110:            }
        -: 1111:
        -: 1112:            //draw 4
    #####: 1113:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:            {
    #####: 1115:              drawCard(i, state);
call    0 never executed
        -: 1116:            }
        -: 1117:          }
        -: 1118:        }
        -: 1119:      }
        -: 1120:    }
    #####: 1121:    return 0;
        -: 1122:
        -: 1123:  case steward:
    #####: 1124:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1125:    {
        -: 1126:      //+2 cards
    #####: 1127:      drawCard(currentPlayer, state);
call    0 never executed
    #####: 1128:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1129:    }
    #####: 1130:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1131:    {
        -: 1132:      //+2 coins
    #####: 1133:      state->coins = state->coins + 2;
        -: 1134:    }
        -: 1135:    else
        -: 1136:    {
        -: 1137:      //trash 2 cards in hand
    #####: 1138:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1139:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1140:    }
        -: 1141:
        -: 1142:    //discard card from hand
    #####: 1143:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1144:    return 0;
        -: 1145:
        -: 1146:  case tribute:
    #####: 1147:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1148:    {
    #####: 1149:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1150:      {
    #####: 1151:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1152:        state->deckCount[nextPlayer]--;
        -: 1153:      }
    #####: 1154:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1157:        state->discardCount[nextPlayer]--;
        -: 1158:      }
        -: 1159:      else
        -: 1160:      {
        -: 1161:        //No Card to Reveal
        -: 1162:        if (DEBUG)
        -: 1163:        {
        -: 1164:          printf("No cards to reveal\n");
        -: 1165:        }
        -: 1166:      }
        -: 1167:    }
        -: 1168:
        -: 1169:    else
        -: 1170:    {
    #####: 1171:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1172:      {
    #####: 1173:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1174:        {
    #####: 1175:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1176:          state->deckCount[nextPlayer]++;
    #####: 1177:          state->discard[nextPlayer][i] = -1;
    #####: 1178:          state->discardCount[nextPlayer]--;
        -: 1179:        }
        -: 1180:
    #####: 1181:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1182:      }
    #####: 1183:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1184:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1185:      state->deckCount[nextPlayer]--;
    #####: 1186:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1187:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1188:      state->deckCount[nextPlayer]--;
        -: 1189:    }
        -: 1190:
    #####: 1191:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1192:    { //If we have a duplicate card, just drop one
    #####: 1193:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1194:      state->playedCardCount++;
    #####: 1195:      tributeRevealedCards[1] = -1;
        -: 1196:    }
        -: 1197:
    #####: 1198:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1201:      { //Treasure cards
    #####: 1202:        state->coins += 2;
        -: 1203:      }
        -: 1204:
    #####: 1205:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1206:      { //Victory Card Found
    #####: 1207:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1208:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1209:      }
        -: 1210:      else
        -: 1211:      { //Action Card
    #####: 1212:        state->numActions = state->numActions + 2;
        -: 1213:      }
        -: 1214:    }
        -: 1215:
    #####: 1216:    return 0;
        -: 1217:
        -: 1218:  case ambassador:
    #####: 1219:    j = 0; //used to check if player has enough cards to discard
        -: 1220:
    #####: 1221:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1222:    {
    #####: 1223:      return -1;
        -: 1224:    }
        -: 1225:
    #####: 1226:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1232:    {
    #####: 1233:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1234:      {
    #####: 1235:        j++;
        -: 1236:      }
        -: 1237:    }
    #####: 1238:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1239:    {
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:
        -: 1243:    if (DEBUG)
        -: 1244:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1245:
        -: 1246:    //increase supply count for choosen card by amount being discarded
    #####: 1247:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1248:
        -: 1249:    //each other player gains a copy of revealed card
    #####: 1250:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:    {
    #####: 1252:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1253:      {
    #####: 1254:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1255:      }
        -: 1256:    }
        -: 1257:
        -: 1258:    //discard played card from hand
    #####: 1259:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1260:
        -: 1261:    //trash copies of cards returned to supply
    #####: 1262:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1263:    {
    #####: 1264:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1265:      {
    #####: 1266:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1267:        {
    #####: 1268:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1269:          break;
        -: 1270:        }
        -: 1271:      }
        -: 1272:    }
        -: 1273:
    #####: 1274:    return 0;
        -: 1275:
        -: 1276:  case cutpurse:
        -: 1277:
    #####: 1278:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1279:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1282:      {
    #####: 1283:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1284:        {
    #####: 1285:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1286:          {
    #####: 1287:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1288:            break;
        -: 1289:          }
    #####: 1290:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1291:          {
    #####: 1292:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1293:            {
        -: 1294:              if (DEBUG)
        -: 1295:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1296:            }
    #####: 1297:            break;
        -: 1298:          }
        -: 1299:        }
        -: 1300:      }
        -: 1301:    }
        -: 1302:
        -: 1303:    //discard played card from hand
    #####: 1304:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1305:
    #####: 1306:    return 0;
        -: 1307:
        -: 1308:  case embargo:
        -: 1309:    //+2 Coins
    #####: 1310:    state->coins = state->coins + 2;
        -: 1311:
        -: 1312:    //see if selected pile is in play
    #####: 1313:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:
        -: 1318:    //add embargo token to selected supply pile
    #####: 1319:    state->embargoTokens[choice1]++;
        -: 1320:
        -: 1321:    //trash card
    #####: 1322:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1323:    return 0;
        -: 1324:
        -: 1325:  case outpost:
        -: 1326:    //set outpost flag
    #####: 1327:    state->outpostPlayed++;
        -: 1328:
        -: 1329:    //discard card
    #####: 1330:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1331:    return 0;
        -: 1332:
        -: 1333:  case salvager:
        -: 1334:    //+1 buy
    #####: 1335:    state->numBuys++;
        -: 1336:
    #####: 1337:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1338:    {
        -: 1339:      //gain coins equal to trashed card
    #####: 1340:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1341:      //trash card
    #####: 1342:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1343:    }
        -: 1344:
        -: 1345:    //discard card
    #####: 1346:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1347:    return 0;
        -: 1348:
        -: 1349:  case sea_hag:
    #####: 1350:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1351:    {
    #####: 1352:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1353:      {
    #####: 1354:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1355:        state->deckCount[i]--;
    #####: 1356:        state->discardCount[i]++;
    #####: 1357:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1358:      }
        -: 1359:    }
    #####: 1360:    return 0;
        -: 1361:
        -: 1362:  case treasure_map:
        -: 1363:    //search hand for another treasure_map
    #####: 1364:    index = -1;
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1366:    {
    #####: 1367:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1368:      {
    #####: 1369:        index = i;
    #####: 1370:        break;
        -: 1371:      }
        -: 1372:    }
    #####: 1373:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1374:    {
        -: 1375:      //trash both treasure cards
    #####: 1376:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1377:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1378:
        -: 1379:      //gain 4 Gold cards
    #####: 1380:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1381:      {
    #####: 1382:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1383:      }
        -: 1384:
        -: 1385:      //return success
    #####: 1386:      return 1;
        -: 1387:    }
        -: 1388:
        -: 1389:    //no second treasure_map found in hand
    #####: 1390:    return -1;
        -: 1391:  }
        -: 1392:
    #####: 1393:  return -1;
        -: 1394:}
        -: 1395:
function discardCard called 60 returned 100% blocks executed 78%
       60: 1396:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1397:{
        -: 1398:
        -: 1399:  //if card is not trashed, added to Played pile
       60: 1400:  if (trashFlag < 1)
branch  0 taken 60 (fallthrough)
branch  1 taken 0
        -: 1401:  {
        -: 1402:    //add card to played pile
       60: 1403:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       60: 1404:    state->playedCardCount++;
        -: 1405:  }
        -: 1406:
        -: 1407:  //set played card to -1
       60: 1408:  state->hand[currentPlayer][handPos] = -1;
        -: 1409:
        -: 1410:  //remove card from player's hand
       60: 1411:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -: 1412:  {
        -: 1413:    //reduce number of cards in hand
    #####: 1414:    state->handCount[currentPlayer]--;
        -: 1415:  }
       60: 1416:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
    #####: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        -: 1421:  else
        -: 1422:  {
        -: 1423:    //replace discarded card with last card in hand
       60: 1424:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1425:    //set last card to -1
       60: 1426:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1427:    //reduce number of cards in hand
       60: 1428:    state->handCount[currentPlayer]--;
        -: 1429:  }
        -: 1430:
       60: 1431:  return 0;
        -: 1432:}
        -: 1433:
function gainCard called 1140 returned 100% blocks executed 70%
     1140: 1434:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1435:{
        -: 1436:  //Note: supplyPos is enum of choosen card
        -: 1437:
        -: 1438:  //check if supply pile is empty (0) or card is not used in game (-1)
     1140: 1439:  if (supplyCount(supplyPos, state) < 1)
call    0 returned 1140
branch  1 taken 0 (fallthrough)
branch  2 taken 1140
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:
        -: 1444:  //added card for [whoseTurn] current player:
        -: 1445:  // toFlag = 0 : add to discard
        -: 1446:  // toFlag = 1 : add to deck
        -: 1447:  // toFlag = 2 : add to hand
        -: 1448:
     1140: 1449:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1140
        -: 1450:  {
    #####: 1451:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1452:    state->deckCount[player]++;
        -: 1453:  }
     1140: 1454:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1140
        -: 1455:  {
    #####: 1456:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1457:    state->handCount[player]++;
        -: 1458:  }
        -: 1459:  else
        -: 1460:  {
     1140: 1461:    state->discard[player][state->discardCount[player]] = supplyPos;
     1140: 1462:    state->discardCount[player]++;
        -: 1463:  }
        -: 1464:
        -: 1465:  //decrease number in supply pile
     1140: 1466:  state->supplyCount[supplyPos]--;
        -: 1467:
     1140: 1468:  return 0;
        -: 1469:}
        -: 1470:
function updateCoins called 1470 returned 100% blocks executed 100%
     1470: 1471:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1472:{
        -: 1473:  int i;
        -: 1474:
        -: 1475:  //reset coin count
     1470: 1476:  state->coins = 0;
        -: 1477:
        -: 1478:  //add coins for each Treasure card in player's hand
     8820: 1479:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 7350
branch  1 taken 1470 (fallthrough)
        -: 1480:  {
     7350: 1481:    if (state->hand[player][i] == copper)
branch  0 taken 3120 (fallthrough)
branch  1 taken 4230
        -: 1482:    {
     3120: 1483:      state->coins += 1;
        -: 1484:    }
     4230: 1485:    else if (state->hand[player][i] == silver)
branch  0 taken 2040 (fallthrough)
branch  1 taken 2190
        -: 1486:    {
     2040: 1487:      state->coins += 2;
        -: 1488:    }
     2190: 1489:    else if (state->hand[player][i] == gold)
branch  0 taken 180 (fallthrough)
branch  1 taken 2010
        -: 1490:    {
      180: 1491:      state->coins += 3;
        -: 1492:    }
        -: 1493:  }
        -: 1494:
        -: 1495:  //add bonus
     1470: 1496:  state->coins += bonus;
        -: 1497:
     1470: 1498:  return 0;
        -: 1499:}
        -: 1500:
        -: 1501://end of dominion.c
