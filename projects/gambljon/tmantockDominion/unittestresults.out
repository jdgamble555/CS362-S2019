######## Unit Test 1 #######
testSeaHagEffect: FAIL: The top card from the second player's deck was removed. | Expected truthy value, but received false.
testSeaHagEffect: FAIL: The new top card of the deck is a curse card. | Expected truthy value, but received false.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 337 returned 100% blocks executed 100%
      337:    8:int compare(const void *a, const void *b)
        -:    9:{
      337:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:   11:    return 1;
      333:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       88:   13:    return -1;
      245:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 11 returned 100% blocks executed 88%
       11:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       11:   48:  SelectStream(1);
call    0 returned 100%
       11:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       11:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       11:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      121:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1210:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       11:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       11:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       11:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       11:   92:    state->supplyCount[estate] = 8;
       11:   93:    state->supplyCount[duchy] = 8;
       11:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       11:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  105:  state->supplyCount[silver] = 40;
       11:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      231:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     1815:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     1705:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      110:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       22:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       11:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       99:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      110:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1595:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       33:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       22:  146:    state->deckCount[i] = 0;
       88:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       66:  149:      state->deck[i][j] = estate;
       66:  150:      state->deckCount[i]++;
        -:  151:    }
      176:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      154:  154:      state->deck[i][j] = copper;
      154:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       33:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       22:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       33:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       22:  172:    state->handCount[i] = 0;
       22:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      308:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      297:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       11:  188:  state->outpostPlayed = 0;
       11:  189:  state->phase = 0;
       11:  190:  state->numActions = 1;
       11:  191:  state->numBuys = 1;
       11:  192:  state->playedCardCount = 0;
       11:  193:  state->whoseTurn = 0;
       11:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       66:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       55:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       11:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       11:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 26 returned 100% blocks executed 100%
       26:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       26:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       26:  216:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        3:  217:    return -1;
       23:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      271:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      225:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      225:  224:    newDeck[newDeckPos] = state->deck[player][card];
      225:  225:    newDeckPos++;
      742:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      517:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      225:  230:    state->deckCount[player]--;
        -:  231:  }
      248:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      225:  234:    state->deck[player][i] = newDeck[i];
      225:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       23:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        6:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 77 returned 100% blocks executed 100%
       77:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       77:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        7:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
        5:  626:      state->deck[player][i] = state->discard[player][i];
        5:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  654:      return -1;
        -:  655:
        1:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        1:  657:    state->deckCount[player]--;
        1:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       75:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       75:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       75:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       75:  672:    state->deckCount[player]--;
       75:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       76:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 2 returned 100% blocks executed 100%
        2:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        2:  744:  int z = 0, drawnTreasure = 0;
        2:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       14:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       10:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       10:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       10:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       10:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        4:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
        6:  764:      tempHand[z] = drawnCard;
        6:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
        6:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       10:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
        6:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
        6:  773:    z--;
        -:  774:  }
        -:  775:
        2:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 2 returned 100% blocks executed 100%
        2:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        2:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        2:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        2:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        2:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 2 returned 100% blocks executed 100%
        2:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       10:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
        8:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        2:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        2:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 6 returned 100% blocks executed 4%
        6:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        6:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        6:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        6:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        6:  866:  switch (card)
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        1:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        1: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       11: 1396:  if (trashFlag < 1)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1397:  {
        -: 1398:    //add card to played pile
        7: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        7: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       11: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       11: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       11: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       11: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       11: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       11: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       11: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 11 returned 100% blocks executed 64%
       11: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       11: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       66: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       55: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       55: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       11: 1491:  state->coins += bonus;
        -: 1492:
       11: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Unit Test 2 #######
testGreatHallDiscard: PASS: A card is drawn from the player's deck.
testGreatHallDiscard: PASS: A card was added to the discarded deck
testGreatHallDiscard: PASS: The top card of the discard deck is the Great Hall card.
testGreatHallDiscard: FAIL: The function returns 0. | Expected truthy value, but received false.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 367 returned 100% blocks executed 100%
      367:    8:int compare(const void *a, const void *b)
        -:    9:{
      367:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:   11:    return 1;
      363:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       96:   13:    return -1;
      267:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 12 returned 100% blocks executed 88%
       12:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       12:   48:  SelectStream(1);
call    0 returned 100%
       12:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       12:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       12:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      132:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1320:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1200:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       12:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       12:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       12:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       12:   92:    state->supplyCount[estate] = 8;
       12:   93:    state->supplyCount[duchy] = 8;
       12:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       12:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  105:  state->supplyCount[silver] = 40;
       12:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      252:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     1980:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     1860:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      120:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       24:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       12:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      108:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      120:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1740:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       36:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       24:  146:    state->deckCount[i] = 0;
       96:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       72:  149:      state->deck[i][j] = estate;
       72:  150:      state->deckCount[i]++;
        -:  151:    }
      192:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      168:  154:      state->deck[i][j] = copper;
      168:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       36:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       24:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       36:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       24:  172:    state->handCount[i] = 0;
       24:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      336:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      324:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       12:  188:  state->outpostPlayed = 0;
       12:  189:  state->phase = 0;
       12:  190:  state->numActions = 1;
       12:  191:  state->numBuys = 1;
       12:  192:  state->playedCardCount = 0;
       12:  193:  state->whoseTurn = 0;
       12:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       72:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       60:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       12:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       12:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 28 returned 100% blocks executed 100%
       28:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       28:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       28:  216:  if (state->deckCount[player] < 1)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3:  217:    return -1;
       25:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      295:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      245:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      245:  224:    newDeck[newDeckPos] = state->deck[player][card];
      245:  225:    newDeckPos++;
      809:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      564:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      245:  230:    state->deckCount[player]--;
        -:  231:  }
      270:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      245:  234:    state->deck[player][i] = newDeck[i];
      245:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       25:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        6:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 83 returned 100% blocks executed 100%
       83:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       83:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        7:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
        5:  626:      state->deck[player][i] = state->discard[player][i];
        5:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  654:      return -1;
        -:  655:
        1:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        1:  657:    state->deckCount[player]--;
        1:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       81:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       81:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       81:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       81:  672:    state->deckCount[player]--;
       81:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       82:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 2 returned 100% blocks executed 100%
        2:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        2:  744:  int z = 0, drawnTreasure = 0;
        2:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       14:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       10:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       10:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       10:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       10:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        4:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
        6:  764:      tempHand[z] = drawnCard;
        6:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
        6:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       10:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
        6:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
        6:  773:    z--;
        -:  774:  }
        -:  775:
        2:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 3 returned 100% blocks executed 100%
        3:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        3:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        3:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        3:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        3:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 2 returned 100% blocks executed 100%
        2:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       10:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
        8:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        2:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        2:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 6 returned 100% blocks executed 4%
        6:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        6:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        6:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        6:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        6:  866:  switch (card)
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        1:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        1: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 12 returned 100% blocks executed 78%
       12: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       12: 1396:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1397:  {
        -: 1398:    //add card to played pile
        8: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       12: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       12: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       12: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       12: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       12: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       12: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       12: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 12 returned 100% blocks executed 64%
       12: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       12: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       72: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       60: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       60: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       12: 1491:  state->coins += bonus;
        -: 1492:
       12: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Unit Test 3 #######
testSmithyDraw: FAIL: The three cards drawn are from the player's deck. | Expected truthy value, but received false.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 397 returned 100% blocks executed 100%
      397:    8:int compare(const void *a, const void *b)
        -:    9:{
      397:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:   11:    return 1;
      393:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      104:   13:    return -1;
      289:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 13 returned 100% blocks executed 88%
       13:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       13:   48:  SelectStream(1);
call    0 returned 100%
       13:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       13:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       13:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      143:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1430:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1300:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       13:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       13:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       13:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       13:   92:    state->supplyCount[estate] = 8;
       13:   93:    state->supplyCount[duchy] = 8;
       13:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       13:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  105:  state->supplyCount[silver] = 40;
       13:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      273:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     2145:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     2015:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      130:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       26:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       13:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      117:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      130:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1885:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       39:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       26:  146:    state->deckCount[i] = 0;
      104:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       78:  149:      state->deck[i][j] = estate;
       78:  150:      state->deckCount[i]++;
        -:  151:    }
      208:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      182:  154:      state->deck[i][j] = copper;
      182:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       39:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       26:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       39:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       26:  172:    state->handCount[i] = 0;
       26:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      364:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      351:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       13:  188:  state->outpostPlayed = 0;
       13:  189:  state->phase = 0;
       13:  190:  state->numActions = 1;
       13:  191:  state->numBuys = 1;
       13:  192:  state->playedCardCount = 0;
       13:  193:  state->whoseTurn = 0;
       13:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       78:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       65:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       13:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       13:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 30 returned 100% blocks executed 100%
       30:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       30:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       30:  216:  if (state->deckCount[player] < 1)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        3:  217:    return -1;
       27:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      319:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      265:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      265:  224:    newDeck[newDeckPos] = state->deck[player][card];
      265:  225:    newDeckPos++;
      876:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      611:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      265:  230:    state->deckCount[player]--;
        -:  231:  }
      292:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      265:  234:    state->deck[player][i] = newDeck[i];
      265:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       27:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        6:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 92 returned 100% blocks executed 100%
       92:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       92:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        7:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
        5:  626:      state->deck[player][i] = state->discard[player][i];
        5:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  654:      return -1;
        -:  655:
        1:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        1:  657:    state->deckCount[player]--;
        1:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       90:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       90:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       90:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       90:  672:    state->deckCount[player]--;
       90:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       91:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 2 returned 100% blocks executed 100%
        2:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        2:  744:  int z = 0, drawnTreasure = 0;
        2:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       14:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       10:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       10:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       10:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       10:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        4:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
        6:  764:      tempHand[z] = drawnCard;
        6:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
        6:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       10:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
        6:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
        6:  773:    z--;
        -:  774:  }
        -:  775:
        2:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 3 returned 100% blocks executed 100%
        3:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        3:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        3:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        3:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        3:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 3 returned 100% blocks executed 100%
        3:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       15:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       12:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        3:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        3:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 6 returned 100% blocks executed 4%
        6:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        6:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        6:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        6:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        6:  866:  switch (card)
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        1:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        1: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 13 returned 100% blocks executed 78%
       13: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       13: 1396:  if (trashFlag < 1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1397:  {
        -: 1398:    //add card to played pile
        9: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        9: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       13: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       13: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       13: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       13: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       13: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       13: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       13: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 13 returned 100% blocks executed 64%
       13: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       13: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       78: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       65: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       65: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       13: 1491:  state->coins += bonus;
        -: 1492:
       13: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Unit Test 4 #######
testAdventurerShuffle: FAIL: Cards were added to the deck. | Expected truthy value, but received false.
testAdventurerShuffle: FAIL: The discarded cards were added to the remaining card in the deck. | Expected truthy value, but received false.
testAdventurerShuffle: FAIL: All the cards from discarded are added to the deck. | Expected truthy value, but received false.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 434 returned 100% blocks executed 100%
      434:    8:int compare(const void *a, const void *b)
        -:    9:{
      434:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        8:   11:    return 1;
      426:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      112:   13:    return -1;
      314:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 14 returned 100% blocks executed 88%
       14:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       14:   48:  SelectStream(1);
call    0 returned 100%
       14:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       14:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       14:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      154:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1540:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1400:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       14:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       14:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       14:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       14:   92:    state->supplyCount[estate] = 8;
       14:   93:    state->supplyCount[duchy] = 8;
       14:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       14:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  105:  state->supplyCount[silver] = 40;
       14:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      294:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     2310:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     2170:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      140:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       28:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       14:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      126:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      140:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2030:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       42:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       28:  146:    state->deckCount[i] = 0;
      112:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       84:  149:      state->deck[i][j] = estate;
       84:  150:      state->deckCount[i]++;
        -:  151:    }
      224:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      196:  154:      state->deck[i][j] = copper;
      196:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       42:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       28:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       42:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       28:  172:    state->handCount[i] = 0;
       28:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      392:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      378:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       14:  188:  state->outpostPlayed = 0;
       14:  189:  state->phase = 0;
       14:  190:  state->numActions = 1;
       14:  191:  state->numBuys = 1;
       14:  192:  state->playedCardCount = 0;
       14:  193:  state->whoseTurn = 0;
       14:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       84:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       70:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       14:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       14:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 36 returned 100% blocks executed 100%
       36:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       36:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       36:  216:  if (state->deckCount[player] < 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        6:  217:    return -1;
       30:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      350:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      290:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      290:  224:    newDeck[newDeckPos] = state->deck[player][card];
      290:  225:    newDeckPos++;
      948:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  227:    {
      658:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      290:  230:    state->deckCount[player]--;
        -:  231:  }
      320:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      290:  234:    state->deck[player][i] = newDeck[i];
      290:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       30:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        6:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 103 returned 100% blocks executed 100%
      103:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      103:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
       14:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
       10:  626:      state->deck[player][i] = state->discard[player][i];
       10:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        4:  630:    state->deckCount[player] = state->discardCount[player];
        4:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        4:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        4:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        4:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        4:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        4:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  654:      return -1;
        -:  655:
        2:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        2:  657:    state->deckCount[player]--;
        2:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       99:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       99:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       99:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       99:  672:    state->deckCount[player]--;
       99:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      101:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 3 returned 100% blocks executed 100%
        3:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        3:  744:  int z = 0, drawnTreasure = 0;
        3:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       22:  747:  while (drawnTreasure < 2)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  748:  {
       16:  749:    if (state->deckCount[player] < 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        4:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       16:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       16:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       16:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 63% (fallthrough)
branch  1 taken 38%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        6:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
       10:  764:      tempHand[z] = drawnCard;
       10:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
       10:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       16:  770:  while (z > 0)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  771:  {
       10:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
       10:  773:    z--;
        -:  774:  }
        -:  775:
        3:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 3 returned 100% blocks executed 100%
        3:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        3:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        3:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        3:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        3:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 3 returned 100% blocks executed 100%
        3:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       15:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       12:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        3:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        3:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 6 returned 100% blocks executed 4%
        6:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        6:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        6:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        6:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        6:  866:  switch (card)
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        1:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        1: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 13 returned 100% blocks executed 78%
       13: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       13: 1396:  if (trashFlag < 1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1397:  {
        -: 1398:    //add card to played pile
        9: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        9: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       13: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       13: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       13: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       13: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       13: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       13: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       13: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 14 returned 100% blocks executed 64%
       14: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       14: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       84: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       70: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       70: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       14: 1491:  state->coins += bonus;
        -: 1492:
       14: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Card Test 1 #######
testAdventurerEffect: FAIL: The last three cards in the player's hand are treasure cards | Expected truthy value, but received false.
testAdventurerEffect: PASS: The player's hand has the three treasure cards and the adventurer card was removed
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 464 returned 100% blocks executed 100%
      464:    8:int compare(const void *a, const void *b)
        -:    9:{
      464:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        8:   11:    return 1;
      456:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      120:   13:    return -1;
      336:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 15 returned 100% blocks executed 88%
       15:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       15:   48:  SelectStream(1);
call    0 returned 100%
       15:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       15:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       15:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      165:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1650:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1500:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       15:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       15:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       15:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       15:   92:    state->supplyCount[estate] = 8;
       15:   93:    state->supplyCount[duchy] = 8;
       15:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       15:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  105:  state->supplyCount[silver] = 40;
       15:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      315:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     2475:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     2325:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      150:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       30:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       15:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      135:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      150:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2175:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       45:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       30:  146:    state->deckCount[i] = 0;
      120:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       90:  149:      state->deck[i][j] = estate;
       90:  150:      state->deckCount[i]++;
        -:  151:    }
      240:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      210:  154:      state->deck[i][j] = copper;
      210:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       45:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       30:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       45:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       30:  172:    state->handCount[i] = 0;
       30:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      420:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      405:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       15:  188:  state->outpostPlayed = 0;
       15:  189:  state->phase = 0;
       15:  190:  state->numActions = 1;
       15:  191:  state->numBuys = 1;
       15:  192:  state->playedCardCount = 0;
       15:  193:  state->whoseTurn = 0;
       15:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       90:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       75:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       15:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       15:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 38 returned 100% blocks executed 100%
       38:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       38:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       38:  216:  if (state->deckCount[player] < 1)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        6:  217:    return -1;
       32:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      374:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      310:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  224:    newDeck[newDeckPos] = state->deck[player][card];
      310:  225:    newDeckPos++;
     1015:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  227:    {
      705:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      310:  230:    state->deckCount[player]--;
        -:  231:  }
      342:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      310:  234:    state->deck[player][i] = newDeck[i];
      310:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       32:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 7 returned 100% blocks executed 100%
        7:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        7:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 112 returned 100% blocks executed 100%
      112:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      112:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
       14:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
       10:  626:      state->deck[player][i] = state->discard[player][i];
       10:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        4:  630:    state->deckCount[player] = state->discardCount[player];
        4:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        4:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        4:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        4:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        4:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        4:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  654:      return -1;
        -:  655:
        2:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        2:  657:    state->deckCount[player]--;
        2:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      108:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      108:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      108:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      108:  672:    state->deckCount[player]--;
      108:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      110:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 4 returned 100% blocks executed 100%
        4:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        4:  744:  int z = 0, drawnTreasure = 0;
        4:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       28:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       20:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        4:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       20:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       20:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       20:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        8:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
       12:  764:      tempHand[z] = drawnCard;
       12:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
       12:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       20:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
       12:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
       12:  773:    z--;
        -:  774:  }
        -:  775:
        4:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 3 returned 100% blocks executed 100%
        3:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        3:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        3:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        3:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        3:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 3 returned 100% blocks executed 100%
        3:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       15:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       12:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        3:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        3:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 7 returned 100% blocks executed 4%
        7:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        7:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        7:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        7:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        7:  866:  switch (card)
branch  0 taken 29%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 14%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 43%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        2:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        1: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 13 returned 100% blocks executed 78%
       13: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       13: 1396:  if (trashFlag < 1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1397:  {
        -: 1398:    //add card to played pile
        9: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        9: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       13: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       13: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       13: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       13: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       13: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       13: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       13: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 15 returned 100% blocks executed 64%
       15: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       15: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       90: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       75: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       75: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       15: 1491:  state->coins += bonus;
        -: 1492:
       15: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Card Test 2 #######
testSmithyEffect: FAIL: Three cards have been added to player one's hand and the Smity card has been removed | Expected truthy value, but received false.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 494 returned 100% blocks executed 100%
      494:    8:int compare(const void *a, const void *b)
        -:    9:{
      494:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        8:   11:    return 1;
      486:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      128:   13:    return -1;
      358:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 16 returned 100% blocks executed 88%
       16:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       16:   48:  SelectStream(1);
call    0 returned 100%
       16:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       16:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       16:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      176:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1760:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1600:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       16:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       16:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       16:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       16:   92:    state->supplyCount[estate] = 8;
       16:   93:    state->supplyCount[duchy] = 8;
       16:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       16:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:  105:  state->supplyCount[silver] = 40;
       16:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      336:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     2640:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     2480:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      160:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       32:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       16:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      144:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      160:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2320:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       48:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       32:  146:    state->deckCount[i] = 0;
      128:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       96:  149:      state->deck[i][j] = estate;
       96:  150:      state->deckCount[i]++;
        -:  151:    }
      256:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      224:  154:      state->deck[i][j] = copper;
      224:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       48:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       32:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       48:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       32:  172:    state->handCount[i] = 0;
       32:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      448:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      432:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       16:  188:  state->outpostPlayed = 0;
       16:  189:  state->phase = 0;
       16:  190:  state->numActions = 1;
       16:  191:  state->numBuys = 1;
       16:  192:  state->playedCardCount = 0;
       16:  193:  state->whoseTurn = 0;
       16:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       96:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       80:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       16:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       16:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 40 returned 100% blocks executed 100%
       40:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       40:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       40:  216:  if (state->deckCount[player] < 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        6:  217:    return -1;
       34:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      398:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      330:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      330:  224:    newDeck[newDeckPos] = state->deck[player][card];
      330:  225:    newDeckPos++;
     1082:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      752:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      330:  230:    state->deckCount[player]--;
        -:  231:  }
      364:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      330:  234:    state->deck[player][i] = newDeck[i];
      330:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       34:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        8:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 121 returned 100% blocks executed 100%
      121:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      121:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
       14:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
       10:  626:      state->deck[player][i] = state->discard[player][i];
       10:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        4:  630:    state->deckCount[player] = state->discardCount[player];
        4:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        4:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        4:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        4:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        4:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        4:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  654:      return -1;
        -:  655:
        2:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        2:  657:    state->deckCount[player]--;
        2:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      117:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      117:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      117:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      117:  672:    state->deckCount[player]--;
      117:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      119:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 4 returned 100% blocks executed 100%
        4:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        4:  744:  int z = 0, drawnTreasure = 0;
        4:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       28:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       20:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        4:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       20:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       20:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       20:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        8:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
       12:  764:      tempHand[z] = drawnCard;
       12:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
       12:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       20:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
       12:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
       12:  773:    z--;
        -:  774:  }
        -:  775:
        4:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 3 returned 100% blocks executed 100%
        3:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        3:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        3:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        3:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        3:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 4 returned 100% blocks executed 100%
        4:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       20:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       16:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        4:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        4:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 8 returned 100% blocks executed 4%
        8:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        8:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        8:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        8:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        8:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        8:  866:  switch (card)
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 13%
branch 10 taken 0%
branch 11 taken 38%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        2:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        2: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        1: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 14 returned 100% blocks executed 78%
       14: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       14: 1396:  if (trashFlag < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1397:  {
        -: 1398:    //add card to played pile
       10: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       10: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       14: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       14: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       14: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       14: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       14: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       14: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       14: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 16 returned 100% blocks executed 64%
       16: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       16: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
       96: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       80: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       80: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       16: 1491:  state->coins += bonus;
        -: 1492:
       16: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Card Test 3 #######
testGreatHallEffect: PASS: The Great Hall card was removed and a card was drawn from the player's deck.
testGreatHallEffect: PASS: The number of game actions was increased by 1
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 524 returned 100% blocks executed 100%
      524:    8:int compare(const void *a, const void *b)
        -:    9:{
      524:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        8:   11:    return 1;
      516:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      136:   13:    return -1;
      380:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 17 returned 100% blocks executed 88%
       17:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       17:   48:  SelectStream(1);
call    0 returned 100%
       17:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       17:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       17:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      187:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     1870:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1700:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       17:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       17:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       17:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       17:   92:    state->supplyCount[estate] = 8;
       17:   93:    state->supplyCount[duchy] = 8;
       17:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       17:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       17:  105:  state->supplyCount[silver] = 40;
       17:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      357:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     2805:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     2635:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      170:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       34:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       17:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      153:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      170:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2465:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       51:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       34:  146:    state->deckCount[i] = 0;
      136:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
      102:  149:      state->deck[i][j] = estate;
      102:  150:      state->deckCount[i]++;
        -:  151:    }
      272:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      238:  154:      state->deck[i][j] = copper;
      238:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       51:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       34:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       51:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       34:  172:    state->handCount[i] = 0;
       34:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      476:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      459:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       17:  188:  state->outpostPlayed = 0;
       17:  189:  state->phase = 0;
       17:  190:  state->numActions = 1;
       17:  191:  state->numBuys = 1;
       17:  192:  state->playedCardCount = 0;
       17:  193:  state->whoseTurn = 0;
       17:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      102:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       85:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       17:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       17:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 42 returned 100% blocks executed 100%
       42:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       42:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       42:  216:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        6:  217:    return -1;
       36:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      422:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      350:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      350:  224:    newDeck[newDeckPos] = state->deck[player][card];
      350:  225:    newDeckPos++;
     1149:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      799:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      350:  230:    state->deckCount[player]--;
        -:  231:  }
      386:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      350:  234:    state->deck[player][i] = newDeck[i];
      350:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       36:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        9:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 127 returned 100% blocks executed 100%
      127:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      127:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
       14:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
       10:  626:      state->deck[player][i] = state->discard[player][i];
       10:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        4:  630:    state->deckCount[player] = state->discardCount[player];
        4:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        4:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        4:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        4:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        4:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        4:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  654:      return -1;
        -:  655:
        2:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        2:  657:    state->deckCount[player]--;
        2:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      123:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      123:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      123:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      123:  672:    state->deckCount[player]--;
      123:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      125:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 4 returned 100% blocks executed 100%
        4:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        4:  744:  int z = 0, drawnTreasure = 0;
        4:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       28:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       20:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        4:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       20:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       20:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       20:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        8:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
       12:  764:      tempHand[z] = drawnCard;
       12:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
       12:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       20:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
       12:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
       12:  773:    z--;
        -:  774:  }
        -:  775:
        4:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 4 returned 100% blocks executed 100%
        4:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        4:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        4:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        4:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        4:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 4 returned 100% blocks executed 100%
        4:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       20:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       16:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        4:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        4:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 3 returned 100% blocks executed 100%
        3:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        3:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        1:  830:    drawCard(player, state);
call    0 returned 100%
        1:  831:    drawCard(player, state);
call    0 returned 100%
        1:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        1:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        2:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        2:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        2:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        3:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        3:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 9 returned 100% blocks executed 4%
        9:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
        9:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
        9:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
        9:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
        9:  866:  switch (card)
branch  0 taken 22%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 22%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 22%
branch 10 taken 0%
branch 11 taken 33%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        2:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        2: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        2: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        3: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 15 returned 100% blocks executed 78%
       15: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       15: 1396:  if (trashFlag < 1)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1397:  {
        -: 1398:    //add card to played pile
       11: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       11: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       15: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       15: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       15: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       15: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       15: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       15: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       15: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 17 returned 100% blocks executed 64%
       17: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       17: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
      102: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
       85: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
       85: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       17: 1491:  state->coins += bonus;
        -: 1492:
       17: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
######## Card Test 4 #######
testStewardEffectChoice1: PASS: The coins amount was not changed
testStewardEffectChoice1: PASS: The player drew 2 cards and discarded the Steward card
testStewardEffectChoice2: PASS: The coins amount was increased by 2
testStewardEffectChoice2: FAIL: No new cards were drawn and the Steward card was removed. | Expected truthy value, but received false.
4 - 4testStewardEffectChoice3: PASS: The amount coins was not changed
testStewardEffectChoice3: PASS: The two cards were discarded along with the Steward card.
Function 'updateCoins'
Lines executed:63.64% of 11
Branches executed:50.00% of 8
Taken at least once:37.50% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.95% of 202
Branches executed:12.99% of 177
Taken at least once:2.82% of 177
Calls executed:8.62% of 58

Function 'steward_effect'
Lines executed:100.00% of 11
Branches executed:100.00% of 3
Taken at least once:100.00% of 3
Calls executed:100.00% of 5

Function 'smithy_effect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'sea_hag_effect'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:29.60% of 581
Branches executed:27.88% of 416
Taken at least once:20.43% of 416
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 614 returned 100% blocks executed 100%
      614:    8:int compare(const void *a, const void *b)
        -:    9:{
      614:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8:   11:    return 1;
      606:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      160:   13:    return -1;
      446:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 20 returned 100% blocks executed 88%
       20:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       20:   48:  SelectStream(1);
call    0 returned 100%
       20:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
       20:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       20:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      220:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
     2200:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     2000:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       20:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
       20:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       20:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
       20:   92:    state->supplyCount[estate] = 8;
       20:   93:    state->supplyCount[duchy] = 8;
       20:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       20:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  105:  state->supplyCount[silver] = 40;
       20:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      420:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     3300:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     3100:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      200:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  117:        {
       40:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
       20:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      180:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      200:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2900:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       60:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       40:  146:    state->deckCount[i] = 0;
      160:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
      120:  149:      state->deck[i][j] = estate;
      120:  150:      state->deckCount[i]++;
        -:  151:    }
      320:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      280:  154:      state->deck[i][j] = copper;
      280:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       60:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       40:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       60:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       40:  172:    state->handCount[i] = 0;
       40:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      560:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      540:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       20:  188:  state->outpostPlayed = 0;
       20:  189:  state->phase = 0;
       20:  190:  state->numActions = 1;
       20:  191:  state->numBuys = 1;
       20:  192:  state->playedCardCount = 0;
       20:  193:  state->whoseTurn = 0;
       20:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      120:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
      100:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       20:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       20:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 48 returned 100% blocks executed 100%
       48:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       48:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       48:  216:  if (state->deckCount[player] < 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        6:  217:    return -1;
       42:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      494:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      410:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      410:  224:    newDeck[newDeckPos] = state->deck[player][card];
      410:  225:    newDeckPos++;
     1350:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  227:    {
      940:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      410:  230:    state->deckCount[player]--;
        -:  231:  }
      452:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      410:  234:    state->deck[player][i] = newDeck[i];
      410:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       42:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       12:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 144 returned 100% blocks executed 100%
      144:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      144:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
       14:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  625:    {
       10:  626:      state->deck[player][i] = state->discard[player][i];
       10:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        4:  630:    state->deckCount[player] = state->discardCount[player];
        4:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        4:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        4:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        4:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        4:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        4:  653:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  654:      return -1;
        -:  655:
        2:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
        2:  657:    state->deckCount[player]--;
        2:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      140:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      140:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      140:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      140:  672:    state->deckCount[player]--;
      140:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      142:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 0 returned 0% blocks executed 0%
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function adventurer_effect called 4 returned 100% blocks executed 100%
        4:  742:int adventurer_effect(int player, struct gameState *state)
        -:  743:{
        4:  744:  int z = 0, drawnTreasure = 0;
        4:  745:  int tempHand[MAX_HAND] = {0};
        -:  746:
       28:  747:  while (drawnTreasure < 2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  748:  {
       20:  749:    if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
        4:  751:      shuffle(player, state);
call    0 returned 100%
        -:  752:    }
        -:  753:
       20:  754:    drawCard(player, state);
call    0 returned 100%
        -:  755:
       20:  756:    int drawnCard = state->hand[player][state->handCount[player] - 1]; // top card of hand is most recently drawn card.
        -:  757:
       20:  758:    if (drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  759:    {
        8:  760:      drawnTreasure++;
        -:  761:    }
        -:  762:    else
        -:  763:    {
       12:  764:      tempHand[z] = drawnCard;
       12:  765:      state->handCount[player]--; // this should just remove the top card (the most recently drawn one).
       12:  766:      z++;
        -:  767:    }
        -:  768:  }
        -:  769:  // Bug caused by never reaching the zero index of the tempHand
       20:  770:  while (z > 0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  771:  {
       12:  772:    state->discard[player][state->discardCount[player]++] = tempHand[z]; // discard all cards in play that have been drawn
       12:  773:    z--;
        -:  774:  }
        -:  775:
        4:  776:  return 0;
        -:  777:}
        -:  778:
function great_hall_effect called 4 returned 100% blocks executed 100%
        4:  779:int great_hall_effect(int player, int handPos, struct gameState *state)
        -:  780:{
        -:  781:  // +1 Card
        4:  782:  drawCard(player, state);
call    0 returned 100%
        -:  783:
        -:  784:  // +1 Actions
        4:  785:  state->numActions++;
        -:  786:
        -:  787:  // Discard card from player's hand
        4:  788:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  789:  // Bug Caused by returning a negative value
        4:  790:  return -1;
        -:  791:}
        -:  792:
function sea_hag_effect called 2 returned 100% blocks executed 100%
        2:  793:int sea_hag_effect(int currentPlayer, struct gameState *state)
        -:  794:{
        6:  795:  for (int player = 0; player < state->numPlayers; player++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  796:  {
        4:  797:    if (player != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  798:    {
        2:  799:      state->discard[player][state->discardCount[player]] = state->deck[player][state->deckCount[player]--];
        2:  800:      state->deckCount[player]--;
        2:  801:      state->discardCount[player]++;
        -:  802:      // Bug Caused by Index Out of Range
        2:  803:      state->deck[player][state->deckCount[player]] = curse; // Top card now a curse card
        -:  804:    }
        -:  805:  }
        -:  806:
        2:  807:  return 0;
        -:  808:}
        -:  809:
function smithy_effect called 4 returned 100% blocks executed 100%
        4:  810:int smithy_effect(int player, int handPos, struct gameState *state)
        -:  811:{
        -:  812:  // +3 Cards
       20:  813:  for (int i = 0; i <= 3; i++) // Bug Caused by looping 4 times
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  814:  {
       16:  815:    drawCard(player, state);
call    0 returned 100%
        -:  816:  }
        -:  817:
        -:  818:  // Discard Card from player's hand
        4:  819:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  820:
        4:  821:  return 0;
        -:  822:}
        -:  823:
function steward_effect called 6 returned 100% blocks executed 100%
        6:  824:int steward_effect(int player, int handPos, int playerChoice, int discardedCard1, int discardedCard2, struct gameState *state)
        -:  825:{
        6:  826:  switch (playerChoice)
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        -:  827:  {
        -:  828:  case 1:
        -:  829:    // +2 Cards
        2:  830:    drawCard(player, state);
call    0 returned 100%
        2:  831:    drawCard(player, state);
call    0 returned 100%
        2:  832:    break;
        -:  833:  case 2:
        -:  834:    // +2 Coins
        2:  835:    state->coins += 2;
        -:  836:  default:
        -:  837:    // Trash 2 Cards from player's hand
        4:  838:    discardCard(discardedCard1, player, state, 1);
call    0 returned 100%
        4:  839:    discardCard(discardedCard2, player, state, 1);
call    0 returned 100%
        4:  840:    break;
        -:  841:  }
        -:  842:  // Remove card from player's hand
        6:  843:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  844:
        6:  845:  return 0;
        -:  846:}
        -:  847:
function cardEffect called 12 returned 100% blocks executed 4%
       12:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int x;
        -:  854:  int index;
       12:  855:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  856:  int nextPlayer = currentPlayer + 1;
        -:  857:
       12:  858:  int tributeRevealedCards[2] = {-1, -1};
        -:  859:  int temphand[MAX_HAND]; // moved above the if statement
       12:  860:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:  {
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
       12:  866:  switch (card)
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  867:  {
        -:  868:  case adventurer:
        2:  869:    return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  870:
        -:  871:  case council_room:
        -:  872:    //+4 Cards
    #####:  873:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:    {
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:    }
        -:  877:
        -:  878:    //+1 Buy
    #####:  879:    state->numBuys++;
        -:  880:
        -:  881:    //Each other player draws a card
    #####:  882:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        drawCard(i, state);
call    0 never executed
        -:  887:      }
        -:  888:    }
        -:  889:
        -:  890:    //put played card in played card pile
    #####:  891:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case feast:
        -:  896:    //gain card with cost up to 5
        -:  897:    //Backup hand
    #####:  898:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:    {
    #####:  900:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  901:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  902:    }
        -:  903:    //Backup hand
        -:  904:
        -:  905:    //Update Coins for Buy
    #####:  906:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  907:    x = 1; //Condition to loop on
    #####:  908:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  909:    { //Buy one card
    #####:  910:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  911:      {
        -:  912:        if (DEBUG)
        -:  913:          printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:        if (DEBUG)
        -:  916:        {
        -:  917:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  918:        }
        -:  919:      }
    #####:  920:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  921:      {
    #####:  922:        printf("That card is too expensive!\n");
call    0 never executed
        -:  923:
        -:  924:        if (DEBUG)
        -:  925:        {
        -:  926:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  927:        }
        -:  928:      }
        -:  929:      else
        -:  930:      {
        -:  931:
        -:  932:        if (DEBUG)
        -:  933:        {
        -:  934:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  935:        }
        -:  936:
    #####:  937:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  938:        x = 0;                                      //No more buying cards
        -:  939:
        -:  940:        if (DEBUG)
        -:  941:        {
        -:  942:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:        }
        -:  944:      }
        -:  945:    }
        -:  946:
        -:  947:    //Reset Hand
    #####:  948:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  949:    {
    #####:  950:      state->hand[currentPlayer][i] = temphand[i];
    #####:  951:      temphand[i] = -1;
        -:  952:    }
        -:  953:    //Reset Hand
        -:  954:
    #####:  955:    return 0;
        -:  956:
        -:  957:  case gardens:
    #####:  958:    return -1;
        -:  959:
        -:  960:  case mine:
    #####:  961:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  962:
    #####:  963:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:    {
    #####:  965:      return -1;
        -:  966:    }
        -:  967:
    #####:  968:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:    {
    #####:  970:      return -1;
        -:  971:    }
        -:  972:
    #####:  973:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:    {
    #####:  975:      return -1;
        -:  976:    }
        -:  977:
    #####:  978:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:    //discard card from hand
    #####:  981:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:    //discard trashed card
    #####:  984:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:      {
    #####:  988:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  989:        break;
        -:  990:      }
        -:  991:    }
        -:  992:
    #####:  993:    return 0;
        -:  994:
        -:  995:  case remodel:
    #####:  996:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  997:
    #####:  998:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:    {
    #####: 1000:      return -1;
        -: 1001:    }
        -: 1002:
    #####: 1003:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:    //discard card from hand
    #####: 1006:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:    //discard trashed card
    #####: 1009:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:    {
    #####: 1011:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:        break;
        -: 1015:      }
        -: 1016:    }
        -: 1017:
    #####: 1018:    return 0;
        -: 1019:
        -: 1020:  case smithy:
        2: 1021:    return smithy_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1022:
        -: 1023:  case village:
        -: 1024:    //+1 Card
    #####: 1025:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:
        -: 1027:    //+2 Actions
    #####: 1028:    state->numActions = state->numActions + 2;
        -: 1029:
        -: 1030:    //discard played card from hand
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:    return 0;
        -: 1033:
        -: 1034:  case baron:
    #####: 1035:    state->numBuys++; //Increase buys by 1!
    #####: 1036:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1037:    {                             //Boolean true or going to discard an estate
    #####: 1038:      int p = 0;                  //Iterator for hand!
    #####: 1039:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1040:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1041:      {
    #####: 1042:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1043:        {                    //Found an estate card!
    #####: 1044:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1045:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1046:          state->discardCount[currentPlayer]++;
    #####: 1047:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1050:          }
    #####: 1051:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1052:          state->handCount[currentPlayer]--;
    #####: 1053:          card_not_discarded = 0; //Exit the loop
        -: 1054:        }
    #####: 1055:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1056:        {
        -: 1057:          if (DEBUG)
        -: 1058:          {
        -: 1059:            printf("No estate cards in your hand, invalid choice\n");
        -: 1060:            printf("Must gain an estate if there are any\n");
        -: 1061:          }
    #####: 1062:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1063:          {
    #####: 1064:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1065:            state->supplyCount[estate]--; //Decrement estates
    #####: 1066:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            {
    #####: 1068:              isGameOver(state);
call    0 never executed
        -: 1069:            }
        -: 1070:          }
    #####: 1071:          card_not_discarded = 0; //Exit the loop
        -: 1072:        }
        -: 1073:
        -: 1074:        else
        -: 1075:        {
    #####: 1076:          p++; //Next card
        -: 1077:        }
        -: 1078:      }
        -: 1079:    }
        -: 1080:
        -: 1081:    else
        -: 1082:    {
    #####: 1083:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:      {
    #####: 1085:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1087:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:        {
    #####: 1089:          isGameOver(state);
call    0 never executed
        -: 1090:        }
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case great_hall:
        2: 1097:    return great_hall_effect(currentPlayer, handPos, state);
call    0 returned 100%
        -: 1098:
        -: 1099:  case minion:
        -: 1100:    //+1 action
    #####: 1101:    state->numActions++;
        -: 1102:
        -: 1103:    //discard card from hand
    #####: 1104:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1105:
    #####: 1106:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1107:    {
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:
    #####: 1111:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1112:    {
        -: 1113:      //discard hand
    #####: 1114:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1115:      {
    #####: 1116:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1117:      }
        -: 1118:
        -: 1119:      //draw 4
    #####: 1120:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:      {
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:      }
        -: 1124:
        -: 1125:      //other players discard hand and redraw if hand size > 4
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:      {
    #####: 1128:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:        {
    #####: 1130:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1131:          {
        -: 1132:            //discard hand
    #####: 1133:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1136:            }
        -: 1137:
        -: 1138:            //draw 4
    #####: 1139:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:            {
    #####: 1141:              drawCard(i, state);
call    0 never executed
        -: 1142:            }
        -: 1143:          }
        -: 1144:        }
        -: 1145:      }
        -: 1146:    }
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case steward:
        6: 1150:    return steward_effect(currentPlayer, handPos, choice1, choice2, choice3, state);
call    0 returned 100%
        -: 1151:
        -: 1152:  case tribute:
    #####: 1153:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1158:        state->deckCount[nextPlayer]--;
        -: 1159:      }
    #####: 1160:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1161:      {
    #####: 1162:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1163:        state->discardCount[nextPlayer]--;
        -: 1164:      }
        -: 1165:      else
        -: 1166:      {
        -: 1167:        //No Card to Reveal
        -: 1168:        if (DEBUG)
        -: 1169:        {
        -: 1170:          printf("No cards to reveal\n");
        -: 1171:        }
        -: 1172:      }
        -: 1173:    }
        -: 1174:
        -: 1175:    else
        -: 1176:    {
    #####: 1177:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1178:      {
    #####: 1179:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1182:          state->deckCount[nextPlayer]++;
    #####: 1183:          state->discard[nextPlayer][i] = -1;
    #####: 1184:          state->discardCount[nextPlayer]--;
        -: 1185:        }
        -: 1186:
    #####: 1187:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1188:      }
    #####: 1189:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
    #####: 1192:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:      state->deckCount[nextPlayer]--;
        -: 1195:    }
        -: 1196:
    #####: 1197:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1198:    { //If we have a duplicate card, just drop one
    #####: 1199:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1200:      state->playedCardCount++;
    #####: 1201:      tributeRevealedCards[1] = -1;
        -: 1202:    }
        -: 1203:
    #####: 1204:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:    {
    #####: 1206:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:      { //Treasure cards
    #####: 1208:        state->coins += 2;
        -: 1209:      }
        -: 1210:
    #####: 1211:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1212:      { //Victory Card Found
    #####: 1213:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1215:      }
        -: 1216:      else
        -: 1217:      { //Action Card
    #####: 1218:        state->numActions = state->numActions + 2;
        -: 1219:      }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case ambassador:
    #####: 1225:    j = 0; //used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1240:      {
    #####: 1241:        j++;
        -: 1242:      }
        -: 1243:    }
    #####: 1244:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1245:    {
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
        -: 1249:    if (DEBUG)
        -: 1250:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:    //increase supply count for choosen card by amount being discarded
    #####: 1253:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:    //each other player gains a copy of revealed card
    #####: 1256:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
    #####: 1258:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1259:      {
    #####: 1260:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1261:      }
        -: 1262:    }
        -: 1263:
        -: 1264:    //discard played card from hand
    #####: 1265:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1266:
        -: 1267:    //trash copies of cards returned to supply
    #####: 1268:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1269:    {
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:      {
    #####: 1272:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1273:        {
    #####: 1274:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:          break;
        -: 1276:        }
        -: 1277:      }
        -: 1278:    }
        -: 1279:
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case cutpurse:
        -: 1283:
    #####: 1284:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1285:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1290:        {
    #####: 1291:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1292:          {
    #####: 1293:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1294:            break;
        -: 1295:          }
    #####: 1296:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1297:          {
    #####: 1298:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1299:            {
        -: 1300:              if (DEBUG)
        -: 1301:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:            }
    #####: 1303:            break;
        -: 1304:          }
        -: 1305:        }
        -: 1306:      }
        -: 1307:    }
        -: 1308:
        -: 1309:    //discard played card from hand
    #####: 1310:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1311:
    #####: 1312:    return 0;
        -: 1313:
        -: 1314:  case embargo:
        -: 1315:    //+2 Coins
    #####: 1316:    state->coins = state->coins + 2;
        -: 1317:
        -: 1318:    //see if selected pile is in play
    #####: 1319:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //add embargo token to selected supply pile
    #####: 1325:    state->embargoTokens[choice1]++;
        -: 1326:
        -: 1327:    //trash card
    #####: 1328:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case outpost:
        -: 1332:    //set outpost flag
    #####: 1333:    state->outpostPlayed++;
        -: 1334:
        -: 1335:    //discard card
    #####: 1336:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:    return 0;
        -: 1338:
        -: 1339:  case salvager:
        -: 1340:    //+1 buy
    #####: 1341:    state->numBuys++;
        -: 1342:
    #####: 1343:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //gain coins equal to trashed card
    #####: 1346:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1347:      //trash card
    #####: 1348:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //discard card
    #####: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1353:    return 0;
        -: 1354:
        -: 1355:  case sea_hag:
    #####: 1356:    return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1357:
        -: 1358:  case treasure_map:
        -: 1359:    //search hand for another treasure_map
    #####: 1360:    index = -1;
    #####: 1361:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1362:    {
    #####: 1363:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:      {
    #####: 1365:        index = i;
    #####: 1366:        break;
        -: 1367:      }
        -: 1368:    }
    #####: 1369:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
        -: 1371:      //trash both treasure cards
    #####: 1372:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1373:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1374:
        -: 1375:      //gain 4 Gold cards
    #####: 1376:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:      {
    #####: 1378:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1379:      }
        -: 1380:
        -: 1381:      //return success
    #####: 1382:      return 1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //no second treasure_map found in hand
    #####: 1386:    return -1;
        -: 1387:  }
        -: 1388:
    #####: 1389:  return -1;
        -: 1390:}
        -: 1391:
function discardCard called 22 returned 100% blocks executed 78%
       22: 1392:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1393:{
        -: 1394:
        -: 1395:  //if card is not trashed, added to Played pile
       22: 1396:  if (trashFlag < 1)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1397:  {
        -: 1398:    //add card to played pile
       14: 1399:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       14: 1400:    state->playedCardCount++;
        -: 1401:  }
        -: 1402:
        -: 1403:  //set played card to -1
       22: 1404:  state->hand[currentPlayer][handPos] = -1;
        -: 1405:
        -: 1406:  //remove card from player's hand
       22: 1407:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1408:  {
        -: 1409:    //reduce number of cards in hand
    #####: 1410:    state->handCount[currentPlayer]--;
        -: 1411:  }
       22: 1412:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
        -: 1416:  }
        -: 1417:  else
        -: 1418:  {
        -: 1419:    //replace discarded card with last card in hand
       22: 1420:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1421:    //set last card to -1
       22: 1422:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1423:    //reduce number of cards in hand
       22: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:
       22: 1427:  return 0;
        -: 1428:}
        -: 1429:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1430:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1431:{
        -: 1432:  //Note: supplyPos is enum of choosen card
        -: 1433:
        -: 1434:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1435:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:  {
    #####: 1437:    return -1;
        -: 1438:  }
        -: 1439:
        -: 1440:  //added card for [whoseTurn] current player:
        -: 1441:  // toFlag = 0 : add to discard
        -: 1442:  // toFlag = 1 : add to deck
        -: 1443:  // toFlag = 2 : add to hand
        -: 1444:
    #####: 1445:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1446:  {
    #####: 1447:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1448:    state->deckCount[player]++;
        -: 1449:  }
    #####: 1450:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1451:  {
    #####: 1452:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1453:    state->handCount[player]++;
        -: 1454:  }
        -: 1455:  else
        -: 1456:  {
    #####: 1457:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1458:    state->discardCount[player]++;
        -: 1459:  }
        -: 1460:
        -: 1461:  //decrease number in supply pile
    #####: 1462:  state->supplyCount[supplyPos]--;
        -: 1463:
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
function updateCoins called 20 returned 100% blocks executed 64%
       20: 1467:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1468:{
        -: 1469:  int i;
        -: 1470:  //reset coin count
       20: 1471:  state->coins = 0;
        -: 1472:
        -: 1473:  //add coins for each Treasure card in player's hand
      120: 1474:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1475:  {
      100: 1476:    if (state->hand[player][i] == copper)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1477:    {
      100: 1478:      state->coins += 1;
        -: 1479:    }
    #####: 1480:    else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1481:    {
    #####: 1482:      state->coins += 2;
        -: 1483:    }
    #####: 1484:    else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1485:    {
    #####: 1486:      state->coins += 3;
        -: 1487:    }
        -: 1488:  }
        -: 1489:
        -: 1490:  //add bonus
       20: 1491:  state->coins += bonus;
        -: 1492:
       20: 1493:  return 0;
        -: 1494:}
        -: 1495:
        -: 1496://end of dominion.c
